# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=0.3)
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    0.065), point2=(0.0, -0.0549999999674037))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.05), point2=(
    0.0449999999627471, 0.05))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0449999999627471, 
    0.05), point2=(0.0449999999627471, -0.0549999999674037))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0449999999627471, 
    -0.0549999999674037), point2=(0.0, -0.0549999999674765))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 
    -0.0549999999674765), point2=(0.0, 0.05))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(-0.065, 
    0.0), point2=(0.08, 0.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.027789767831564, 0.0745053142309189), value=0.0381, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1])
mdb.models['Model-1'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.0953118354082108, 0.0171889085322618), value=0.13335, vertex1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], vertex2=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2])
mdb.models['Model-1'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], textPoint=(
    0.110219314694405, 0.0154343266040087), value=0.066675)
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Full Tank Al Model', 
    type=DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Full Tank Al Model'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.006, name='__profile__', 
    sheetSize=0.277, transform=
    mdb.models['Model-1'].parts['Full Tank Al Model'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Full Tank Al Model'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Full Tank Al Model'].edges[0], 
    sketchOrientation=LEFT, origin=(0.01905, 0.0, 0.0)))
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-1'].parts['Full Tank Al Model'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.01905, 0.066675), 
    point2=(0.01905, 0.066675))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.01905, 0.066675), 
    point2=(0.01905, -0.066675))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.01905, -0.066675), 
    point2=(-0.01905, -0.0666750000000728))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.01905, 
    -0.0666750000000728), point2=(-0.01905, 0.066675))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(
    -0.01905, 0.066675), point2=(-0.01905, -0.0666750000000728))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[0], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[1], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].parts['Full Tank Al Model'].SolidRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=LEFT, 
    sketchPlane=mdb.models['Model-1'].parts['Full Tank Al Model'].faces[0], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[0])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumCsysByThreePoints(
    coordSysType=CYLINDRICAL, line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), 
    name='Datum csys-1', origin=(0.0, 0.0, 0.0))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.saveAs(pathName='N:/Desktop/FEA/Full Tank Model Database.cae')
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByCoordinate(
    coords=(0.0, 0.0, 0.0))
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[2], MIDDLE), 
    vector=(0.0, 0.0, 0.0))
del mdb.models['Model-1'].parts['Full Tank Al Model'].features['Datum pt-2']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByProjOnEdge(edge=
    mdb.models['Model-1'].parts['Full Tank Al Model'].datums[3].axis2, point=
    mdb.models['Model-1'].parts['Full Tank Al Model'].vertices[0])
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByProjOnEdge(edge=
    mdb.models['Model-1'].parts['Full Tank Al Model'].datums[3].axis3, point=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByProjOnEdge(edge=
    mdb.models['Model-1'].parts['Full Tank Al Model'].datums[3].axis1, point=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[1], MIDDLE))
del mdb.models['Model-1'].parts['Full Tank Al Model'].features['Datum pt-4']
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[1], MIDDLE), 
    vector=(0.0, 0.0, 2.0))
del mdb.models['Model-1'].parts['Full Tank Al Model'].features['Datum pt-4']
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByOffset(point=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[1], MIDDLE), 
    vector=(0.0, 0.0, 0.05))
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumCsysByThreePoints(
    coordSysType=CYLINDRICAL, name='cyl coords', origin=
    mdb.models['Model-1'].parts['Full Tank Al Model'].datums[7], point1=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[1], MIDDLE), 
    point2=mdb.models['Model-1'].parts['Full Tank Al Model'].datums[10])
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Datum csys-1'].suppress(
    )
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Datum csys-1'].resume(
    )
mdb.models['Model-1'].parts['Full Tank Al Model'].features['cyl coords'].resume(
    )
del mdb.models['Model-1'].parts['Full Tank Al Model'].features['cyl coords']
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Datum pt-2'].resume(
    )
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumPointByMidPoint(point1=
    mdb.models['Model-1'].parts['Full Tank Al Model'].vertices[1], point2=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[2], MIDDLE))
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumCsysByThreePoints(
    coordSysType=CYLINDRICAL, name='cyl coords', origin=
    mdb.models['Model-1'].parts['Full Tank Al Model'].datums[7], point1=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[1], MIDDLE), 
    point2=mdb.models['Model-1'].parts['Full Tank Al Model'].datums[10])
del mdb.models['Model-1'].parts['Full Tank Al Model'].features['cyl coords']
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumCsysByThreePoints(
    coordSysType=CYLINDRICAL, name='cyl coords', origin=
    mdb.models['Model-1'].parts['Full Tank Al Model'].datums[7], point1=
    mdb.models['Model-1'].parts['Full Tank Al Model'].datums[10], point2=
    mdb.models['Model-1'].parts['Full Tank Al Model'].InterestingPoint(
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[1], MIDDLE))
mdb.models['Model-1'].parts['Full Tank Al Model'].features['cyl coords'].suppress(
    )
del mdb.models['Model-1'].parts['Full Tank Al Model'].features['cyl coords']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Full Tank Al Model-1', part=
    mdb.models['Model-1'].parts['Full Tank Al Model'])
mdb.models['Model-1'].parts['Full Tank Al Model'].features.changeKey(fromName=
    'Datum csys-1', toName='Abaqus_global')
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Abaqus_global'].suppress(
    )
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['Datum csys-1'].suppress()
mdb.models['Model-1'].rootAssembly.features['Datum csys-1'].resume()
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-1'].datums[10])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['Datum csys-1'].suppress()
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='Cyl Coords', origin=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-1'].datums[4]
    , point1=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-1'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-1'].edges[1], 
    MIDDLE), point2=mdb.models['Model-1'].rootAssembly.referencePoints[4])
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='Aluminum 6061T6')
mdb.models['Model-1'].materials['Aluminum 6061T6'].Elastic(table=((
    68900000000.0, 0.33), ))
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Aluminum 6061T6', name=
    'Tank thickness shell section', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.008128, thicknessField=
    '', thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].parts['Full Tank Al Model'].Set(cells=
    mdb.models['Model-1'].parts['Full Tank Al Model'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['Full Tank Al Model'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Full Tank Al Model'].sets['Set-1'], 
    sectionName='Tank thickness shell section', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].StaticStep(name='Static General Linear Elastic', 
    previous='Initial')
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['Full Tank Al Model'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Full Tank Al Model'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].dimensions[0], ))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry[4])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    0.0300993360579014, 0.0863599851727486), value=0.001, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].sketches['__edit__'].rectangle(point1=(0.0381, 0.066675), 
    point2=(0.0, 0.0675))
mdb.models['Model-1'].sketches['__edit__'].rectangle(point1=(0.0381, -0.066675)
    , point2=(0.0, -0.0675))
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].undo()
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[3], point1=(
    0.0376091711223125, 0.0665519386529922))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0381, 0.066675), 
    point2=(0.0381, 0.0674999999441206))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[8])
mdb.models['Model-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].geometry[4], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[8])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0381, 
    0.0674999999441206), point2=(0.0, 0.0674999999441206))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[9])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[9])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 
    0.0674999999441206), point2=(0.0, 0.0667287409305573))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[10])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[9], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[10])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 
    0.0667287409305573), point2=(0.0371, 0.066675))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[5], point1=(
    0.0375082083046436, -0.0668884292244911))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0381, -0.066675), 
    point2=(0.0381, -0.0674999999441206))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[12])
mdb.models['Model-1'].sketches['__edit__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__edit__'].geometry[4], 
    entity2=mdb.models['Model-1'].sketches['__edit__'].geometry[12])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0381, 
    -0.0674999999441206), point2=(0.0, -0.0674999999441206))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[13])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[12], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[13])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 
    -0.0674999999441206), point2=(0.0, -0.0666884854435921))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[14])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[14])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 
    -0.0666884854435921), point2=(0.0371, -0.0666750000000728))
mdb.models['Model-1'].sketches['__edit__'].FixedConstraint(entity=
    mdb.models['Model-1'].sketches['__edit__'].geometry[15])
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[11], point1=(
    0.0098953926935792, 0.0663504973053932))
mdb.models['Model-1'].sketches['__edit__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[10], point1=(
    0.000394293107092381, 0.0672166123986244))
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0371, 0.066675), 
    point2=(0.0, 0.066675))
mdb.models['Model-1'].sketches['__edit__'].HorizontalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[16])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[16])
mdb.models['Model-1'].sketches['__edit__'].Line(point1=(0.0, 0.066675), point2=
    (0.0, 0.0674999999441206))
mdb.models['Model-1'].sketches['__edit__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__edit__'].geometry[17])
mdb.models['Model-1'].sketches['__edit__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__edit__'].geometry[16], entity2=
    mdb.models['Model-1'].sketches['__edit__'].geometry[17])
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Full Tank Al Model'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].parts['Full Tank Al Model'].backup()
mdb.models['Model-1'].parts['Full Tank Al Model'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['Full Tank Al Model'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Full Tank Al Model'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'].sketch)
mdb.models['Model-1'].parts['Full Tank Al Model'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'])
mdb.models['Model-1'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-1'].sketches['__edit__'].geometry[2], ))
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['Full Tank Al Model'].regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].parts['Full Tank Al Model'].backup()
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Solid revolve-1'].suppress(
    )
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.007, name='__profile__', 
    sheetSize=0.28, transform=
    mdb.models['Model-1'].parts['Full Tank Al Model'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['Full Tank Al Model'].faces[0], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['Full Tank Al Model'].edges[2], 
    sketchOrientation=LEFT, origin=(0.031681, 8.5e-05, 0.0)))
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-1'].parts['Full Tank Al Model'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].ConstructionLine(point1=(
    -0.031681, 0.0674149999441206), point2=(-0.031681, -0.0332500000949949))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.031681, 0.06659), 
    point2=(-0.031681, 0.0674149999441206))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[4], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.031681, 
    0.0674149999441206), point2=(0.006419, 0.0674149999441206))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.006419, 
    0.0674149999441206), point2=(0.006419, 0.06659))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.006419, 0.06659), 
    point2=(0.006419, -0.06676))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[15], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[16])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.006419, -0.06676), 
    point2=(0.006419, -0.0675849999441206))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['Model-1'].sketches['__profile__'].geometry[16], 
    entity2=mdb.models['Model-1'].sketches['__profile__'].geometry[17])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.006419, 
    -0.0675849999441206), point2=(-0.031681, -0.0675849999441206))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[17], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.031681, 
    -0.0675849999441206), point2=(-0.031681, -0.0667734854435921))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[18], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[19])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.031681, 
    -0.0667734854435921), point2=(0.005419, -0.06676))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.005419, -0.06676), 
    point2=(0.005419, 0.06659))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[21])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.005419, 0.06659), 
    point2=(-0.031681, 0.06659))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[22])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[21], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[22])
mdb.models['Model-1'].parts['Full Tank Al Model'].SolidRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=LEFT, 
    sketchPlane=mdb.models['Model-1'].parts['Full Tank Al Model'].faces[0], 
    sketchPlaneSide=SIDE1, sketchUpEdge=
    mdb.models['Model-1'].parts['Full Tank Al Model'].edges[2])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Full Tank Al Model'].DatumCsysByThreePoints(
    coordSysType=CYLINDRICAL, line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), 
    name='Abaqus global', origin=(0.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'Full Tank Al Model-2', part=
    mdb.models['Model-1'].parts['Full Tank Al Model'])
mdb.models['Model-1'].rootAssembly.deleteFeatures(('Full Tank Al Model-1', 
    'RP-1', 'Cyl Coords'))
mdb.models['Model-1'].rootAssembly.features['Datum csys-1'].resume()
mdb.models['Model-1'].rootAssembly.features['Datum csys-1'].suppress()
mdb.models['Model-1'].parts['Full Tank Al Model'].features['Abaqus global'].suppress(
    )
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.DatumPointByOffset(point=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-2'].datums[4]
    , vector=(0.0, 0.0, 0.02))
mdb.models['Model-1'].rootAssembly.features.changeKey(fromName='Datum pt-1', 
    toName='Theta offset')
mdb.models['Model-1'].rootAssembly.features['Theta offset'].setValues(zOffset=
    0.2)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.features['Theta offset'].setValues(zOffset=
    0.05)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.DatumCsysByThreePoints(coordSysType=
    CYLINDRICAL, name='Cyl Coords', origin=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-2'].datums[4]
    , point1=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-2'].InterestingPoint(
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-2'].edges[3], 
    MIDDLE), point2=mdb.models['Model-1'].rootAssembly.datums[8])
mdb.models['Model-1'].parts['Full Tank Al Model'].Set(cells=
    mdb.models['Model-1'].parts['Full Tank Al Model'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-2')
mdb.models['Model-1'].parts['Full Tank Al Model'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Full Tank Al Model'].sets['Set-2'], 
    sectionName='Tank thickness shell section', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Surface(name='Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-2'].faces.getSequenceFromMask(
    ('[#38 ]', ), ))
mdb.models['Model-1'].Pressure(amplitude=UNSET, createStepName=
    'Static General Linear Elastic', distributionType=UNIFORM, field='', 
    magnitude=303000.0, name='Internal Pressure Load', region=
    mdb.models['Model-1'].rootAssembly.surfaces['Surf-1'])
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Full Tank Al Model-2'].edges.getSequenceFromMask(
    ('[#5 ]', ), ), name='Set-1')
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName=
    'Static General Linear Elastic', distributionType=UNIFORM, fieldName='', 
    fixed=OFF, localCsys=None, name='Static BCs', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-1'], u1=0.0, u2=0.0, u3=0.0, 
    ur1=0.0, ur2=0.0, ur3=0.0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Full Tank Al Model'].regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='Model-1-Copy', objectToCopy=mdb.models['Model-1'])
mdb.models['Model-1-Copy'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1-Copy'].parts['Full Tank Al Model'].features['Shell planar-1'].sketch)
mdb.models['Model-1-Copy'].parts['Full Tank Al Model'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['Model-1-Copy'].sketches['__edit__'], upToFeature=
    mdb.models['Model-1-Copy'].parts['Full Tank Al Model'].features['Shell planar-1'])
del mdb.models['Model-1-Copy'].sketches['__edit__']
mdb.models['Model-1-Copy'].ConstrainedSketch(name='__profile__', sheetSize=0.5)
mdb.models['Model-1-Copy'].sketches['__profile__'].ConstructionLine(point1=(
    0.0, -0.25), point2=(0.0, 0.25))
mdb.models['Model-1-Copy'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[2])
mdb.models['Model-1-Copy'].sketches['__profile__'].Line(point1=(0.01, 0.02), 
    point2=(0.03, 0.02))
mdb.models['Model-1-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[3])
mdb.models['Model-1-Copy'].sketches['__profile__'].Line(point1=(0.03, 0.02), 
    point2=(0.03, -0.02))
mdb.models['Model-1-Copy'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[4])
mdb.models['Model-1-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[4])
mdb.models['Model-1-Copy'].sketches['__profile__'].Line(point1=(0.03, -0.02), 
    point2=(0.01, -0.02))
mdb.models['Model-1-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[5])
mdb.models['Model-1-Copy'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[5])
mdb.models['Model-1-Copy'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].vertices[0], textPoint=(
    0.00662323832511902, 0.040196068584919), value=0.003175)
mdb.models['Model-1-Copy'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.0161901265382767, 0.0500000044703484), value=0.034925, vertex1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].vertices[0], vertex2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].vertices[1])
mdb.models['Model-1-Copy'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[2], textPoint=(
    0.00956688821315765, -0.0448529422283173), value=0.003175)
mdb.models['Model-1-Copy'].sketches['__profile__'].ObliqueDimension(textPoint=(
    0.079724133014679, -0.0053921565413475), value=0.133, vertex1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].vertices[1], vertex2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].vertices[2])
mdb.models['Model-1-Copy'].sketches['__profile__'].ConstructionLine(point1=(
    0.0, 0.0), point2=(0.117499999967404, 0.0))
mdb.models['Model-1-Copy'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[6])
mdb.models['Model-1-Copy'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[6], textPoint=(
    -0.0610900819301605, 0.00241372734308243), value=0.0665)
mdb.models['Model-1-Copy'].sketches['__profile__'].undo()
mdb.models['Model-1-Copy'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[6])
mdb.models['Model-1-Copy'].sketches['__profile__'].DistanceDimension(entity1=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[6], textPoint=(
    -0.0804611891508102, 0.00393174588680267), value=0.0665)
mdb.models['Model-1-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1-Copy'].sketches['__profile__'].constraints[15], ))
mdb.models['Model-1-Copy'].sketches['__profile__'].delete(objectList=(
    mdb.models['Model-1-Copy'].sketches['__profile__'].geometry[6], ))
mdb.models['Model-1-Copy'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1-Copy'].parts['Part-2'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Model-1-Copy'].sketches['__profile__'])
del mdb.models['Model-1-Copy'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1-Copy'].parts['Part-2'].Set(faces=
    mdb.models['Model-1-Copy'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ), name='Set-1')
mdb.models['Model-1-Copy'].parts['Part-2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1-Copy'].parts['Part-2'].sets['Set-1'], sectionName=
    'Tank thickness shell section', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1-Copy'].parts['Full Tank Al Model'].Lock()
del mdb.models['Model-1-Copy'].parts['Full Tank Al Model']
# Save by nab2 on 2017_05_08-15.55.53; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1-Copy'].rootAssembly.suppressFeatures(featureNames=(
    'Full Tank Al Model-2', ))
mdb.models['Model-1-Copy'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['Model-1-Copy'].parts['Part-2'])
del mdb.models['Model-1-Copy'].loads['Internal Pressure Load']
del mdb.models['Model-1-Copy'].boundaryConditions['Static BCs']
mdb.models['Model-1-Copy'].rootAssembly.Surface(name='Surf-2', side2Faces=
    mdb.models['Model-1-Copy'].rootAssembly.instances['Part-2-1'].faces.getSequenceFromMask(
    ('[#7 ]', ), ))
mdb.models['Model-1-Copy'].Pressure(amplitude=UNSET, createStepName=
    'Static General Linear Elastic', distributionType=UNIFORM, field='', 
    magnitude=300000.0, name='Load-1', region=
    mdb.models['Model-1-Copy'].rootAssembly.surfaces['Surf-2'])
mdb.models['Model-1-Copy'].rootAssembly.Set(edges=
    mdb.models['Model-1-Copy'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    ('[#12 ]', ), ), name='Set-2')
mdb.models['Model-1-Copy'].DisplacementBC(amplitude=UNSET, createStepName=
    'Static General Linear Elastic', distributionType=UNIFORM, fieldName='', 
    fixed=OFF, localCsys=None, name='BC-1', region=
    mdb.models['Model-1-Copy'].rootAssembly.sets['Set-2'], u1=0.0, u2=0.0, u3=
    0.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
# Save by nab2 on 2017_05_08-16.01.06; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1-Copy'].parts['Part-2'].setMeshControls(elemShape=QUAD, 
    regions=
    mdb.models['Model-1-Copy'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ))
mdb.models['Model-1-Copy'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['Model-1-Copy'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ), ))
mdb.models['Model-1-Copy'].parts['Part-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.009)
mdb.models['Model-1-Copy'].parts['Part-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.005)
mdb.models['Model-1-Copy'].parts['Part-2'].generateMesh()
# Save by nab2 on 2017_05_08-16.02.25; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1-Copy'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1-Copy', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='FullTank1971', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by nab2 on 2017_05_08-16.02.51; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FullTank1971'].submit(consistencyChecking=OFF)
mdb.jobs['FullTank1971']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MCAE17', 'handle': 0, 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FullTank1971.odb', 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MCAE17', 'handle': 9932, 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'FullTank1971', 'memory': 54.0})
mdb.jobs['FullTank1971']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'FullTank1971', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FullTank1971']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'FullTank1971'})
mdb.jobs['FullTank1971']._Message(JOB_COMPLETED, {
    'time': 'Mon May 08 16:03:25 2017', 'jobName': 'FullTank1971'})
# Save by nab2 on 2017_05_08-16.05.42; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_05_08-16.12.57; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models.changeKey(fromName='Model-1-Copy', toName='FullTankAl')
del mdb.jobs['FullTank1971']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAl', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='FullTankAlLinearStatic', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['FullTankAlLinearStatic'].submit(consistencyChecking=OFF)
mdb.jobs['FullTankAlLinearStatic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'MCAE17', 'handle': 0, 'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FullTankAlLinearStatic.odb', 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'MCAE17', 'handle': 9920, 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'FullTankAlLinearStatic', 
    'memory': 54.0})
mdb.jobs['FullTankAlLinearStatic']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FullTankAlLinearStatic', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FullTankAlLinearStatic']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(JOB_COMPLETED, {
    'time': 'Mon May 08 16:17:38 2017', 'jobName': 'FullTankAlLinearStatic'})
# Save by nab2 on 2017_05_08-16.18.02; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_05_08-16.18.07; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FullTankAlLinearStatic'].submit(consistencyChecking=OFF)
mdb.jobs['FullTankAlLinearStatic']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae12', 'handle': 0, 'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FullTankAlLinearStatic.odb', 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae12', 'handle': 9904, 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'FullTankAlLinearStatic', 
    'memory': 54.0})
mdb.jobs['FullTankAlLinearStatic']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FullTankAlLinearStatic', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FullTankAlLinearStatic']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankAlLinearStatic'})
mdb.jobs['FullTankAlLinearStatic']._Message(JOB_COMPLETED, {
    'time': 'Wed May 10 19:04:53 2017', 'jobName': 'FullTankAlLinearStatic'})
mdb.Model(name='FullTankAlFS2', objectToCopy=mdb.models['FullTankAl'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='FullTankInternalPressureLoadFS2', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['FullTankInternalPressureLoadFS2'].submit(consistencyChecking=OFF)
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'mcae12', 'handle': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FullTankInternalPressureLoadFS2.odb', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'mcae12', 'handle': 8484, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'FullTankInternalPressureLoadFS2', 
    'memory': 54.0})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FullTankInternalPressureLoadFS2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(JOB_COMPLETED, {
    'time': 'Wed May 10 19:09:05 2017', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.models['FullTankAlFS2'].loads['Load-1'].setValues(magnitude=600000.0)
mdb.jobs['FullTankInternalPressureLoadFS2'].submit(consistencyChecking=OFF)
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'mcae12', 'handle': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FullTankInternalPressureLoadFS2.odb', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'mcae12', 'handle': 6336, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'FullTankInternalPressureLoadFS2', 
    'memory': 54.0})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FullTankInternalPressureLoadFS2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(JOB_COMPLETED, {
    'time': 'Wed May 10 19:11:35 2017', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
# Save by nab2 on 2017_05_10-19.12.31; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['FullTankAlFS2'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=S8R, elemLibrary=STANDARD), ElemType(elemCode=STRI65, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['FullTankAlFS2'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ), ))
mdb.models['FullTankAlFS2'].parts['Part-2'].generateMesh()
mdb.models['FullTankAlFS2'].parts['Part-2'].deleteMesh(regions=
    mdb.models['FullTankAlFS2'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ))
mdb.models['FullTankAlFS2'].parts['Part-2'].setMeshControls(algorithm=
    MEDIAL_AXIS, regions=
    mdb.models['FullTankAlFS2'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ))
mdb.models['FullTankAlFS2'].parts['Part-2'].generateMesh()
mdb.models['FullTankAlFS2'].parts['Part-2'].deleteMesh(regions=
    mdb.models['FullTankAlFS2'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ))
mdb.models['FullTankAlFS2'].parts['Part-2'].setMeshControls(algorithm=
    ADVANCING_FRONT, regions=
    mdb.models['FullTankAlFS2'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ))
mdb.models['FullTankAlFS2'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=S8R, elemLibrary=STANDARD), ElemType(elemCode=STRI65, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['FullTankAlFS2'].parts['Part-2'].faces.getSequenceFromMask((
    '[#7 ]', ), ), ))
mdb.models['FullTankAlFS2'].parts['Part-2'].generateMesh()
mdb.models['FullTankAlFS2'].rootAssembly.regenerate()
mdb.jobs['FullTankInternalPressureLoadFS2'].submit(consistencyChecking=OFF)
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'mcae12', 'handle': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FullTankInternalPressureLoadFS2.odb', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'mcae12', 'handle': 5808, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'FullTankInternalPressureLoadFS2', 
    'memory': 159.0})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FullTankInternalPressureLoadFS2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(JOB_COMPLETED, {
    'time': 'Wed May 10 19:16:58 2017', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
# Save by nab2 on 2017_05_10-19.19.57; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['FullTankInternalPressureLoadFS2'].submit(consistencyChecking=OFF)
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'mcae07', 'handle': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\FullTankInternalPressureLoadFS2.odb', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'mcae07', 'handle': 10796, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'FullTankInternalPressureLoadFS2', 
    'memory': 159.0})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'FullTankInternalPressureLoadFS2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.jobs['FullTankInternalPressureLoadFS2']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:08:13 2017', 
    'jobName': 'FullTankInternalPressureLoadFS2'})
mdb.Model(name='FullTankAlFS21971', objectToCopy=mdb.models['FullTankAlFS2'])
mdb.Model(name='FullTankAlFS21971-Copy', objectToCopy=
    mdb.models['FullTankAlFS21971'])
mdb.models['FullTankAlFS21971-Copy'].parts['Part-2'].deleteMesh()
mdb.models['FullTankAlFS21971-Copy'].parts['Part-2'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.004)
mdb.models['FullTankAlFS21971-Copy'].parts['Part-2'].generateMesh()
mdb.models.changeKey(fromName='FullTankAlFS21971-Copy', toName=
    'FullTankAlFS22907')
mdb.Model(name='FullTankAlFS22907-Copy', objectToCopy=
    mdb.models['FullTankAlFS22907'])
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].deleteMesh()
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.006)
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].generateMesh()
mdb.models.changeKey(fromName='FullTankAlFS22907-Copy', toName=
    'FullTankAlFS21378')
mdb.Model(name='FullTankAlFS21378-Copy', objectToCopy=
    mdb.models['FullTankAlFS21378'])
mdb.models['FullTankAlFS21378-Copy'].parts['Part-2'].deleteMesh()
mdb.models['FullTankAlFS21378-Copy'].parts['Part-2'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.007)
mdb.models['FullTankAlFS21378-Copy'].parts['Part-2'].generateMesh()
mdb.models.changeKey(fromName='FullTankAlFS21378-Copy', toName=
    'FullTankAlFS21043')
mdb.Model(name='FullTankAlFS22907-Copy', objectToCopy=
    mdb.models['FullTankAlFS22907'])
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].deleteMesh()
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.003)
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].generateMesh()
mdb.models.changeKey(fromName='FullTankAlFS22907-Copy', toName=
    'FullTankAlFS24934')
mdb.Model(name='FullTankAlFS22907-Copy', objectToCopy=
    mdb.models['FullTankAlFS22907'])
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].deleteMesh()
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].seedPart(deviationFactor=
    0.1, minSizeFactor=0.1, size=0.0035)
mdb.models['FullTankAlFS22907-Copy'].parts['Part-2'].generateMesh()
mdb.models.changeKey(fromName='FullTankAlFS22907-Copy', toName=
    'FullTankAlFS23705')
# Save by nab2 on 2017_05_19-13.16.29; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['FullTankAlFS23705'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS21043', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlFS1043', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['FullTankAlFS21043'].rootAssembly.regenerate()
mdb.models['FullTankAlFS21378'].rootAssembly.regenerate()
mdb.models['FullTankAlFS22907'].rootAssembly.regenerate()
mdb.models['FullTankAlFS24934'].rootAssembly.regenerate()
mdb.jobs['AlFS1043'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1043']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS1043.odb', 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 10964, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS1043', 'memory': 91.0})
mdb.jobs['AlFS1043']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS1043', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS1043']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:17:27 2017', 'jobName': 'AlFS1043'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS24934', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlFS1378', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.jobs['AlFS1378']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS21378', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlFS1378', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS21971', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlFS1971', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS22907', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlFS2907', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS23705', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlFS3705', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlFS24934', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlFS4934', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['AlFS1378'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1378']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS1378.odb', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 1000, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS1378', 'memory': 116.0})
mdb.jobs['AlFS1378']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS1378', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS1378']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:21:13 2017', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1971'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1971']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS1971.odb', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 10920, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS1971', 'memory': 159.0})
mdb.jobs['AlFS1971']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS1971', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS1971']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:21:50 2017', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS2907'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS2907']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS2907.odb', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 3928, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS2907', 'memory': 232.0})
mdb.jobs['AlFS2907']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS2907', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS2907']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:22:23 2017', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS3705'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS3705']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS3705.odb', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 11052, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS3705', 'memory': 294.0})
mdb.jobs['AlFS3705']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS3705', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS3705']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:23:10 2017', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS4934'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS4934']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS4934.odb', 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 6680, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS4934', 'memory': 399.0})
mdb.jobs['AlFS4934']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS4934', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS4934']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:24:05 2017', 'jobName': 'AlFS4934'})
# Save by nab2 on 2017_05_19-13.24.20; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_05_19-13.24.21; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='FullTankAlFS2-Copy', objectToCopy=mdb.models['FullTankAlFS2'])
mdb.models['FullTankAlFS2'].Material(name='CF')
mdb.models['FullTankAlFS2'].materials['CF'].Elastic(table=((3500000000.0, 
    3300000000.0, 3300000000.0, 0.35, 0.35, 0.35, 1.3, 1.3, 1.3), ), type=
    ENGINEERING_CONSTANTS)
mdb.models['FullTankAlFS2-Copy'].Material(name='CF')
mdb.models['FullTankAlFS2-Copy'].materials['CF'].Elastic(table=((3500000000.0, 
    3300000000.0, 3300000000.0, 0.35, 0.35, 0.35, 1.3, 1.3, 1.3), ), type=
    ENGINEERING_CONSTANTS)
mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].CompositeLayup(description='', 
    elementType=SHELL, name='CompositeLayup-1', offsetType=MIDDLE_SURFACE, 
    symmetric=False, thicknessAssignment=FROM_SECTION)
mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].Section(
    integrationRule=SIMPSON, poissonDefinition=DEFAULT, preIntegrate=OFF, 
    temperature=GRADIENT, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationType=ROTATION_NONE, angle=0.0, axis=AXIS_3, fieldName='', 
    localCsys=None, orientationType=GLOBAL)
mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    faces=mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-2', region=Region(
    faces=mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-3', region=Region(
    faces=mdb.models['FullTankAlFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models.changeKey(fromName='FullTankAlFS2-Copy', toName='FullTankAlCfFS2')
mdb.models['FullTankAlCfFS2'].parts['Part-2'].generateMesh()
mdb.models['FullTankAlCfFS2'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlCfFS2', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='AlCFfs2', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['AlCFfs2'].submit(consistencyChecking=OFF)
mdb.jobs['AlCFfs2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlCFfs2.odb', 'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 11444, 'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlCFfs2', 'memory': 165.0})
mdb.jobs['AlCFfs2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlCFfs2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlCFfs2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFfs2'})
mdb.jobs['AlCFfs2']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:36:04 2017', 'jobName': 'AlCFfs2'})
# Save by nab2 on 2017_05_19-13.42.24; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='FullTankAlCfFS2-Copy', objectToCopy=
    mdb.models['FullTankAlCfFS2'])
mdb.models.changeKey(fromName='FullTankAlCfFS2-Copy', toName=
    'FullTankAlCfFS2load1test')
mdb.models['FullTankAlCfFS2load1test'].loads['Load-1'].setValues(magnitude=1.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlCfFS2load1test', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='AlCFload1test', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['AlCFload1test'].submit(consistencyChecking=OFF)
mdb.jobs['AlCFload1test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlCFload1test.odb', 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 12120, 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlCFload1test', 'memory': 165.0})
mdb.jobs['AlCFload1test']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlCFload1test', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlCFload1test']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFload1test'})
mdb.jobs['AlCFload1test']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 13:49:37 2017', 'jobName': 'AlCFload1test'})
# Save by nab2 on 2017_05_19-13.50.04; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='FullTankAlCfFS2-Copy', objectToCopy=
    mdb.models['FullTankAlCfFS2'])
del mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1']
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].CompositeLayup(description=
    '', elementType=SHELL, name='CompositeLayup-1', offsetType=MIDDLE_SURFACE, 
    symmetric=False, thicknessAssignment=FROM_SECTION)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].Section(
    integrationRule=SIMPSON, poissonDefinition=DEFAULT, preIntegrate=OFF, 
    temperature=GRADIENT, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationType=ROTATION_NONE, angle=0.0, axis=AXIS_3, fieldName='', 
    localCsys=None, orientationType=GLOBAL)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    faces=mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-2', region=Region(
    faces=mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-3', region=Region(
    faces=mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-4', region=Region(
    faces=mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    faces=mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-6', region=Region(
    faces=mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS2-Copy'].parts['Part-2'].generateMesh()
mdb.models.changeKey(fromName='FullTankAlCfFS2-Copy', toName=
    'FullTankAlCfFS26ply')
mdb.models['FullTankAlCfFS26ply'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlCfFS26ply', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='AlCFfs26ply', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['AlCFfs26ply'].submit(consistencyChecking=OFF)
mdb.jobs['AlCFfs26ply']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae07', 'handle': 0, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlCFfs26ply.odb', 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae07', 'handle': 10000, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlCFfs26ply', 'memory': 171.0})
mdb.jobs['AlCFfs26ply']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlCFfs26ply', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlCFfs26ply']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(JOB_COMPLETED, {
    'time': 'Fri May 19 14:04:20 2017', 'jobName': 'AlCFfs26ply'})
# Save by nab2 on 2017_05_19-14.06.07; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_05_19-14.07.40; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['AlFS1043'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1378'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1971'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1043']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1378']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS2907'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1971']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS3705'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS1043']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS1043.odb', 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1378']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS1378.odb', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS2907']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS1971']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS1971.odb', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS4934'].submit(consistencyChecking=OFF)
mdb.jobs['AlFS3705']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS2907']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS2907.odb', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS1043']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 8452, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1378']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 7096, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS2907']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS1971']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 8576, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1971'})
mdb.jobs['AlFS1043']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1043'})
mdb.jobs['AlFS1378']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1378'})
mdb.jobs['AlFS1971']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1043']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1378']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1043']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS1043', 'memory': 91.0})
mdb.jobs['AlFS1378']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS1378', 'memory': 116.0})
mdb.jobs['AlFS1971']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS1971', 'memory': 159.0})
mdb.jobs['AlFS4934']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS3705']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS3705.odb', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS1043']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS1043', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS3705']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS1378']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS1378', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS2907']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 8420, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS1378']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1378'})
mdb.jobs['AlFS1378']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS1043']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1043'})
mdb.jobs['AlFS1043']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1043'})
mdb.jobs['AlFS2907']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS2907'})
mdb.jobs['AlFS1971']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS1971', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS2907']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS1971']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS1971'})
mdb.jobs['AlFS1971']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS2907']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS2907', 'memory': 232.0})
mdb.jobs['AlFS1378']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:51:29 2017', 'jobName': 'AlFS1378'})
mdb.jobs['AlFS4934']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlFS4934.odb', 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS4934'})
mdb.jobs['AlFS1043']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:51:30 2017', 'jobName': 'AlFS1043'})
mdb.jobs['AlFS2907']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS2907', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS2907']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS2907'})
mdb.jobs['AlFS2907']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS1971']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:51:30 2017', 'jobName': 'AlFS1971'})
mdb.jobs['AlFS3705']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 7580, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS3705', 'memory': 294.0})
mdb.jobs['AlFS2907']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:51:33 2017', 'jobName': 'AlFS2907'})
mdb.jobs['AlFS3705']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS3705', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS3705']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS3705'})
mdb.jobs['AlFS3705']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS4934']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 8940, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlFS4934', 'memory': 399.0})
mdb.jobs['AlFS3705']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:51:37 2017', 'jobName': 'AlFS3705'})
mdb.jobs['AlFS4934']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlFS4934', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlFS4934']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlFS4934'})
mdb.jobs['AlFS4934']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:51:42 2017', 'jobName': 'AlFS4934'})
mdb.jobs['AlCFfs26ply'].submit(consistencyChecking=OFF)
mdb.jobs['AlCFfs26ply']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlCFfs26ply.odb', 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 8420, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'AlCFfs26ply', 'memory': 171.0})
mdb.jobs['AlCFfs26ply']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'AlCFfs26ply', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlCFfs26ply']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCFfs26ply'})
mdb.jobs['AlCFfs26ply']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:53:38 2017', 'jobName': 'AlCFfs26ply'})
mdb.Model(name='FullTankAlCfFS26ply-Copy', objectToCopy=
    mdb.models['FullTankAlCfFS26ply'])
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].orientation.setValues(
    additionalRotationType=ROTATION_NONE, angle=0.0)
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].deletePlies(
    )
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    faces=mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    faces=mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=-45.0, plyName='Ply-3', region=Region(
    faces=mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-4', region=Region(
    faces=mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-5', region=Region(
    faces=mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='CF', numIntPoints=3, orientationType=
    SPECIFY_ORIENT, orientationValue=-45.0, plyName='Ply-6', region=Region(
    faces=mdb.models['FullTankAlCfFS26ply-Copy'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#2 ]', ), )), suppressed=False, thickness=0.00254, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['FullTankAlCfFS26ply-Copy'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='FullTankAlCfFS26ply-Copy', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='AlCfFS26ply45angle', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['AlCfFS26ply45angle'].submit(consistencyChecking=OFF)
mdb.jobs['AlCfFS26ply45angle']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae18', 'handle': 0, 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\AlCfFS26ply45angle.odb', 
    'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae18', 'handle': 8584, 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'AlCfFS26ply45angle', 'memory': 171.0})
mdb.jobs['AlCfFS26ply45angle']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'AlCfFS26ply45angle', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['AlCfFS26ply45angle']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'AlCfFS26ply45angle'})
mdb.jobs['AlCfFS26ply45angle']._Message(JOB_COMPLETED, {
    'time': 'Wed May 24 11:58:52 2017', 'jobName': 'AlCfFS26ply45angle'})
# Save by nab2 on 2017_05_24-11.59.41; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_05_24-12.52.13; build 2016.HF5 2016_07_06-08.50.19 127027
