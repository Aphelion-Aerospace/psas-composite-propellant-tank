# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=0.2)
mdb.models['Model-1'].sketches['__profile__'].sketchOptions.setValues(
    decimalPlaces=3)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.02625, -0.005))
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.02, -0.0125))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], radius=0.0381, 
    textPoint=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].RadialDimension(curve=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], radius=0.0508, 
    textPoint=(0.0508, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0508), 
    point2=(0.0, 0.0381000000052154))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, -0.0381), 
    point2=(0.0, -0.0508000000845641))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].vertices[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], point1=(
    -0.028554942458868, 0.0429034642875195))
mdb.models['Model-1'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], point1=(
    -0.0198479481041431, 0.0329081304371357))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].Material(name='Aluminum6061T6')
mdb.models['Model-1'].materials['Aluminum6061T6'].Elastic(table=((
    69000000000.0, 0.29), ))
mdb.models['Model-1'].materials['Aluminum6061T6'].Conductivity(table=((152.0, 
    ), ))
mdb.models['Model-1'].materials['Aluminum6061T6'].Expansion(table=((2.34e-05, 
    ), ))
mdb.models['Model-1'].parts.changeKey(fromName='Part-1', toName=
    'RingSymmetryApprox')
mdb.models['Model-1'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Aluminum6061T6', name='Shell', 
    numIntPts=5, poissonDefinition=DEFAULT, preIntegrate=OFF, temperature=
    GRADIENT, thickness=0.04445, thicknessField='', thicknessModulus=None, 
    thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Model-1'].HeatTransferStep(amplitude=RAMP, name='Heat Transfer', 
    previous='Initial', response=STEADY_STATE)
mdb.models['Model-1'].parts['RingSymmetryApprox'].Set(faces=
    mdb.models['Model-1'].parts['RingSymmetryApprox'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-1')
mdb.models['Model-1'].parts['RingSymmetryApprox'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['RingSymmetryApprox'].sets['Set-1'], 
    sectionName='Shell', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'RingSymmetryApprox-1', part=
    mdb.models['Model-1'].parts['RingSymmetryApprox'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name=
    'RingSymmetryApprox-2', part=
    mdb.models['Model-1'].parts['RingSymmetryApprox'])
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['RingSymmetryApprox-2'].edges.getSequenceFromMask(
    ('[#c ]', ), ), name='Set-1')
mdb.models['Model-1'].TemperatureBC(amplitude=UNSET, createStepName=
    'Heat Transfer', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    magnitude=-182.0, name='BC-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-1'])
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['RingSymmetryApprox-2'].edges.getSequenceFromMask(
    ('[#21 ]', ), ), name='Set-2')
mdb.models['Model-1'].TemperatureBC(amplitude=UNSET, createStepName=
    'Heat Transfer', distributionType=UNIFORM, fieldName='', fixed=OFF, 
    magnitude=25.0, name='BC-2', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-2'])
mdb.models['Model-1'].boundaryConditions.changeKey(fromName='BC-1', toName=
    'InnerCryoTemp')
mdb.models['Model-1'].boundaryConditions.changeKey(fromName='BC-2', toName=
    'AmbientAir')
mdb.models['Model-1'].HistoryOutputRequest(createStepName='Heat Transfer', 
    name='H-Output-1', variables=('FTEMP', 'HFLA', 'HTL', 'HTLA', 'RADFL', 
    'RADFLA', 'RADTL', 'RADTLA', 'VFTOT', 'SJD', 'SJDA', 'SJDT', 'SJDTA', 
    'WEIGHT'))
mdb.models['Model-1'].parts['RingSymmetryApprox'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['Model-1'].parts['RingSymmetryApprox'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].parts['RingSymmetryApprox'].setElementType(elemTypes=(
    ElemType(elemCode=DS4, elemLibrary=STANDARD), ElemType(elemCode=DS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['RingSymmetryApprox'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['Model-1'].parts['RingSymmetryApprox'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0079)
mdb.models['Model-1'].parts['RingSymmetryApprox'].generateMesh()
mdb.models['Model-1'].parts['RingSymmetryApprox'].deleteMesh()
mdb.models['Model-1'].parts['RingSymmetryApprox'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.005)
mdb.models['Model-1'].parts['RingSymmetryApprox'].generateMesh()
mdb.models['Model-1'].Part(name='RingSymmetryApprox-Copy', objectToCopy=
    mdb.models['Model-1'].parts['RingSymmetryApprox'])
mdb.models['Model-1'].parts.changeKey(fromName='RingSymmetryApprox', toName=
    'RingSymmetryApprox87Elem')
# Save by nab2 on 2017_02_22-13.11.03; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['RingSymmetryApprox-Copy'].deleteMesh()
mdb.models['Model-1'].parts['RingSymmetryApprox-Copy'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.004)
mdb.models['Model-1'].parts['RingSymmetryApprox-Copy'].generateMesh()
mdb.models['Model-1'].parts['RingSymmetryApprox-Copy'].deleteMesh()
mdb.models['Model-1'].parts['RingSymmetryApprox-Copy'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.003)
mdb.models['Model-1'].parts['RingSymmetryApprox-Copy'].generateMesh()
mdb.models['Model-1'].parts.changeKey(fromName='RingSymmetryApprox-Copy', 
    toName='RingSymmetryApprox184')
mdb.models['Model-1'].parts.changeKey(fromName='RingSymmetryApprox184', toName=
    'RingSymmetryApprox184Elem')
mdb.models['Model-1'].Part(name='RingSymmetryApprox184Elem-Copy', objectToCopy=
    mdb.models['Model-1'].parts['RingSymmetryApprox184Elem'])
mdb.models['Model-1'].parts['RingSymmetryApprox184Elem-Copy'].deleteMesh()
mdb.models['Model-1'].parts['RingSymmetryApprox184Elem-Copy'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.002)
mdb.models['Model-1'].parts['RingSymmetryApprox184Elem-Copy'].generateMesh()
mdb.models['Model-1'].parts.changeKey(fromName='RingSymmetryApprox184Elem-Copy'
    , toName='RingSymmetryApprox414Elem')
mdb.models['Model-1'].Part(name='RingSymmetryApprox184Elem-Copy', objectToCopy=
    mdb.models['Model-1'].parts['RingSymmetryApprox184Elem'])
mdb.models['Model-1'].parts['RingSymmetryApprox184Elem-Copy'].deleteMesh()
mdb.models['Model-1'].parts['RingSymmetryApprox184Elem-Copy'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.0025)
mdb.models['Model-1'].parts['RingSymmetryApprox184Elem-Copy'].generateMesh()
mdb.models['Model-1'].parts.changeKey(fromName='RingSymmetryApprox184Elem-Copy'
    , toName='RingSymmetryApprox270Elem')
# Save by nab2 on 2017_02_22-13.15.11; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_02_22-13.19.11; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].parts['RingSymmetryApprox184Elem']
del mdb.models['Model-1'].parts['RingSymmetryApprox270Elem']
del mdb.models['Model-1'].parts['RingSymmetryApprox414Elem']
mdb.models.changeKey(fromName='Model-1', toName='RingSymApprox87')
mdb.Model(name='RingSymApprox87-Copy', objectToCopy=
    mdb.models['RingSymApprox87'])
mdb.models['RingSymApprox87-Copy'].parts['RingSymmetryApprox87Elem'].deleteMesh(
    )
mdb.models['RingSymApprox87-Copy'].parts['RingSymmetryApprox87Elem'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.004)
mdb.models['RingSymApprox87-Copy'].parts['RingSymmetryApprox87Elem'].generateMesh(
    )
mdb.models['RingSymApprox87-Copy'].parts['RingSymmetryApprox87Elem'].deleteMesh(
    )
mdb.models['RingSymApprox87-Copy'].parts['RingSymmetryApprox87Elem'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.0035)
mdb.models['RingSymApprox87-Copy'].parts['RingSymmetryApprox87Elem'].generateMesh(
    )
mdb.models.changeKey(fromName='RingSymApprox87-Copy', toName=
    'RingSymApprox156')
mdb.Model(name='RingSymApprox156-Copy', objectToCopy=
    mdb.models['RingSymApprox156'])
mdb.models['RingSymApprox156-Copy'].parts['RingSymmetryApprox87Elem'].deleteMesh(
    )
mdb.models['RingSymApprox156-Copy'].parts['RingSymmetryApprox87Elem'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.003)
mdb.models['RingSymApprox156-Copy'].parts['RingSymmetryApprox87Elem'].generateMesh(
    )
mdb.models['RingSymApprox156-Copy'].parts['RingSymmetryApprox87Elem'].deleteMesh(
    )
mdb.models['RingSymApprox156-Copy'].parts['RingSymmetryApprox87Elem'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.0025)
mdb.models['RingSymApprox156-Copy'].parts['RingSymmetryApprox87Elem'].generateMesh(
    )
mdb.models.changeKey(fromName='RingSymApprox156-Copy', toName=
    'RingSymApprox270')
mdb.Model(name='RingSymApprox270-Copy', objectToCopy=
    mdb.models['RingSymApprox270'])
mdb.models['RingSymApprox270-Copy'].parts['RingSymmetryApprox87Elem'].deleteMesh(
    )
mdb.models['RingSymApprox270-Copy'].parts['RingSymmetryApprox87Elem'].seedPart(
    deviationFactor=0.1, minSizeFactor=0.1, size=0.002)
mdb.models['RingSymApprox270-Copy'].parts['RingSymmetryApprox87Elem'].generateMesh(
    )
mdb.models.changeKey(fromName='RingSymApprox270-Copy', toName=
    'RingSymApprox414')
# Save by nab2 on 2017_02_22-13.21.47; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['RingSymApprox414'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='RingSymApprox87', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='87elem', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
# Save by nab2 on 2017_02_22-13.22.08; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['87elem'].submit(consistencyChecking=OFF)
mdb.jobs['87elem']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae12', 'handle': 0, 'jobName': '87elem'})
mdb.jobs['87elem']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO VALID RADIATION OUTPUT REQUESTS HAVE BEEN GENERATED. THIS MAY BE BECAUSE NO VALID CAVITIES EXIST IN THE MODEL.', 
    'jobName': '87elem'})
mdb.jobs['87elem']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\87elem.odb', 'jobName': '87elem'})
mdb.jobs['87elem']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '87elem'})
mdb.jobs['87elem']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae12', 'handle': 3464, 'jobName': '87elem'})
mdb.jobs['87elem']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '87elem'})
mdb.jobs['87elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '87elem'})
mdb.jobs['87elem']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '87elem'})
mdb.jobs['87elem']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '87elem', 'memory': 24.0})
mdb.jobs['87elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '87elem'})
mdb.jobs['87elem']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '87elem', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['87elem']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '87elem'})
mdb.jobs['87elem']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '87elem'})
mdb.jobs['87elem']._Message(JOB_COMPLETED, {'time': 'Wed Feb 22 13:22:27 2017', 
    'jobName': '87elem'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='RingSymApprox156', modelPrint=OFF
    , multiprocessingMode=DEFAULT, name='156elem', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='RingSymApprox270', modelPrint=OFF
    , multiprocessingMode=DEFAULT, name='270elem', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='RingSymApprox414', modelPrint=OFF
    , multiprocessingMode=DEFAULT, name='414elem', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['RingSymApprox156'].rootAssembly.regenerate()
mdb.jobs['156elem'].submit(consistencyChecking=OFF)
mdb.models['RingSymApprox270'].rootAssembly.regenerate()
mdb.jobs['156elem']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae12', 'handle': 0, 'jobName': '156elem'})
mdb.jobs['270elem'].submit(consistencyChecking=OFF)
mdb.jobs['156elem']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO VALID RADIATION OUTPUT REQUESTS HAVE BEEN GENERATED. THIS MAY BE BECAUSE NO VALID CAVITIES EXIST IN THE MODEL.', 
    'jobName': '156elem'})
mdb.jobs['156elem']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\156elem.odb', 'jobName': '156elem'})
mdb.jobs['156elem']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '156elem'})
mdb.jobs['270elem']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae12', 'handle': 0, 'jobName': '270elem'})
mdb.jobs['414elem'].submit(consistencyChecking=OFF)
mdb.jobs['156elem']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae12', 'handle': 1400, 'jobName': '156elem'})
mdb.jobs['156elem']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '156elem'})
mdb.jobs['156elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '156elem'})
mdb.jobs['156elem']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '156elem'})
mdb.jobs['156elem']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '156elem', 'memory': 25.0})
mdb.jobs['156elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '156elem'})
mdb.jobs['156elem']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '156elem', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['156elem']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '156elem'})
mdb.jobs['156elem']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '156elem'})
mdb.jobs['270elem']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO VALID RADIATION OUTPUT REQUESTS HAVE BEEN GENERATED. THIS MAY BE BECAUSE NO VALID CAVITIES EXIST IN THE MODEL.', 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\270elem.odb', 'jobName': '270elem'})
mdb.jobs['270elem']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '270elem'})
mdb.jobs['156elem']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 22 13:24:51 2017', 'jobName': '156elem'})
mdb.jobs['414elem']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'mcae12', 'handle': 0, 'jobName': '414elem'})
mdb.jobs['270elem']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae12', 'handle': 12472, 'jobName': '270elem'})
mdb.jobs['270elem']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '270elem'})
mdb.jobs['270elem']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '270elem', 'memory': 26.0})
mdb.jobs['270elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '270elem'})
mdb.jobs['270elem']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '270elem', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['270elem']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '270elem'})
mdb.jobs['414elem']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO VALID RADIATION OUTPUT REQUESTS HAVE BEEN GENERATED. THIS MAY BE BECAUSE NO VALID CAVITIES EXIST IN THE MODEL.', 
    'jobName': '414elem'})
mdb.jobs['414elem']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\414elem.odb', 'jobName': '414elem'})
mdb.jobs['414elem']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '414elem'})
mdb.jobs['270elem']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 22 13:24:56 2017', 'jobName': '270elem'})
mdb.jobs['414elem']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'mcae12', 'handle': 10900, 'jobName': '414elem'})
mdb.jobs['414elem']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '414elem'})
mdb.jobs['414elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '414elem'})
mdb.jobs['414elem']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '414elem'})
mdb.jobs['414elem']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '414elem', 'memory': 29.0})
mdb.jobs['414elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '414elem'})
mdb.jobs['414elem']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '414elem', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['414elem']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '414elem'})
mdb.jobs['414elem']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '414elem'})
mdb.jobs['414elem']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 22 13:25:01 2017', 'jobName': '414elem'})
# Save by nab2 on 2017_02_22-13.26.21; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_02_22-13.26.46; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_02_22-13.28.01; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='RingSymApprox270Stress', objectToCopy=
    mdb.models['RingSymApprox270'])
mdb.jobs['270elem'].submit(consistencyChecking=OFF)
mdb.jobs['270elem']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'CAD07', 'handle': 0, 'jobName': '270elem'})
mdb.jobs['270elem']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO VALID RADIATION OUTPUT REQUESTS HAVE BEEN GENERATED. THIS MAY BE BECAUSE NO VALID CAVITIES EXIST IN THE MODEL.', 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\270elem.odb', 'jobName': '270elem'})
mdb.jobs['270elem']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '270elem'})
mdb.jobs['270elem']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'CAD07', 'handle': 11796, 'jobName': '270elem'})
mdb.jobs['270elem']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '270elem'})
mdb.jobs['270elem']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '270elem', 'memory': 26.0})
mdb.jobs['270elem']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '270elem'})
mdb.jobs['270elem']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '270elem', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['270elem']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '270elem'})
mdb.jobs['270elem']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '270elem'})
mdb.jobs['270elem']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 22 14:19:25 2017', 'jobName': '270elem'})
mdb.models['RingSymApprox270Stress'].StaticStep(maintainAttributes=True, name=
    'Heat Transfer', previous='Initial')
mdb.models['RingSymApprox270Stress'].rootAssembly.Set(faces=
    mdb.models['RingSymApprox270Stress'].rootAssembly.instances['RingSymmetryApprox-2'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-3')
mdb.models['RingSymApprox270Stress'].Temperature(absoluteExteriorTolerance=0.0, 
    beginIncrement=1, beginStep=1, createStepName='Initial', distributionType=
    FROM_FILE, endIncrement=None, endStep=None, exteriorTolerance=0.05, 
    fileName='C:\\temp\\270elem.odb', interpolate=OFF, name=
    'Predefined Field-1')
mdb.models['RingSymApprox270Stress'].rootAssembly.Set(faces=
    mdb.models['RingSymApprox270Stress'].rootAssembly.instances['RingSymmetryApprox-2'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-4')
mdb.models['RingSymApprox270Stress'].Temperature(createStepName='Heat Transfer'
    , crossSectionDistribution=CONSTANT_THROUGH_THICKNESS, distributionType=
    UNIFORM, magnitudes=(-182.0, ), name='Predefined Field-2', region=
    mdb.models['RingSymApprox270Stress'].rootAssembly.sets['Set-4'])
mdb.models['RingSymApprox270Stress'].rootAssembly.Set(edges=
    mdb.models['RingSymApprox270Stress'].rootAssembly.instances['RingSymmetryApprox-2'].edges.getSequenceFromMask(
    ('[#12 ]', ), ), name='Set-5')
mdb.models['RingSymApprox270Stress'].XsymmBC(createStepName='Heat Transfer', 
    localCsys=None, name='xsym', region=
    mdb.models['RingSymApprox270Stress'].rootAssembly.sets['Set-5'])
mdb.models['RingSymApprox270Stress'].parts['RingSymmetryApprox87Elem'].setElementType(
    elemTypes=(ElemType(elemCode=S4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['RingSymApprox270Stress'].parts['RingSymmetryApprox87Elem'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['RingSymApprox270Stress'].parts['RingSymmetryApprox87Elem'].setElementType(
    elemTypes=(ElemType(elemCode=S4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['RingSymApprox270Stress'].parts['RingSymmetryApprox87Elem'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['RingSymApprox270Stress'].rootAssembly.regenerate()
del mdb.models['RingSymApprox270Stress'].boundaryConditions['xsym']
mdb.models['RingSymApprox270Stress'].rootAssembly.Set(edges=
    mdb.models['RingSymApprox270Stress'].rootAssembly.instances['RingSymmetryApprox-2'].edges.getSequenceFromMask(
    ('[#12 ]', ), ), name='Set-6')
mdb.models['RingSymApprox270Stress'].DisplacementBC(amplitude=UNSET, 
    createStepName='Heat Transfer', distributionType=UNIFORM, fieldName='', 
    fixed=OFF, localCsys=None, name='xsym', region=
    mdb.models['RingSymApprox270Stress'].rootAssembly.sets['Set-6'], u1=0.0, 
    u2=UNSET, u3=UNSET, ur1=0.0, ur2=0.0, ur3=0.0)
mdb.models['RingSymApprox270Stress'].rootAssembly.Set(edges=
    mdb.models['RingSymApprox270Stress'].rootAssembly.instances['RingSymmetryApprox-2'].edges.getSequenceFromMask(
    ('[#2d ]', ), ), name='Set-7')
mdb.models['RingSymApprox270Stress'].DisplacementBC(amplitude=UNSET, 
    createStepName='Heat Transfer', distributionType=UNIFORM, fieldName='', 
    fixed=OFF, localCsys=None, name='rotation', region=
    mdb.models['RingSymApprox270Stress'].rootAssembly.sets['Set-7'], u1=UNSET, 
    u2=UNSET, u3=UNSET, ur1=0.0, ur2=0.0, ur3=0.0)
# Save by nab2 on 2017_02_22-14.36.17; build 2016.HF5 2016_07_06-08.50.19 127027
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='RingSymApprox270Stress', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name='270stress', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['270stress'].submit(consistencyChecking=OFF)
mdb.jobs['270stress']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'CAD07', 'handle': 0, 'jobName': '270stress'})
mdb.jobs['270stress']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\temp\\270stress.odb', 'jobName': '270stress'})
mdb.jobs['270stress']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '270stress'})
mdb.jobs['270stress']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'CAD07', 'handle': 12932, 'jobName': '270stress'})
mdb.jobs['270stress']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '270stress'})
mdb.jobs['270stress']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': '270stress'})
mdb.jobs['270stress']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': '270stress'})
mdb.jobs['270stress']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': '270stress', 'memory': 30.0})
mdb.jobs['270stress']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': '270stress'})
mdb.jobs['270stress']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': '270stress', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['270stress']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': '270stress'})
mdb.jobs['270stress']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': '270stress'})
mdb.jobs['270stress']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 22 14:36:55 2017', 'jobName': '270stress'})
# Save by nab2 on 2017_02_22-14.42.48; build 2016.HF5 2016_07_06-08.50.19 127027
# Save by nab2 on 2017_02_22-14.50.18; build 2016.HF5 2016_07_06-08.50.19 127027
